#!/usr/bin/env bash

# Ensure script executes from desired dir
cwd=$PWD
execution_context="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$execution_context" || exit 1

trap "echo Aborted; exit" INT

usage="
Run one or more routine hurl files and capture body whether error or not.

Usage: $(basename "$0") [options] [<file>...]

Options:
  -e --env        Set the environment to use.
  -a --all        Select all routine files (overrides file arguments).
  -t --test       Run files in test mode and don't capture output.
  -v --view       View response body in jless after each file completes.
  -n --no-view    Skip viewing responses in jless.
  -o --out        Output body to path. Will prefix with index for multiple files.
  -s --skip-save  Don't save response and skip prompts to do so.
  -d --debug      Only view files that don't pass their tests (overrides -v and -n).
  -h --help       Show this help mesasge and exit.
"

ENV=
FILES=()
TEST=false
VIEW=
OUT=
DEBUG=false
# Get user options
shopt -s extglob
while true; do
  case "$1" in
    -e | --env ) ENV="$2"; shift 2 ;;
    -a | --all )
      IFS=$'\n' read -r -d '' -a FILES < <(find routine -type f -name '*.hurl')
      shift
      ;;
    -t | --test ) TEST=true; shift ;; 
    -v | --view ) VIEW=0; shift ;;
    -n | --no-view ) VIEW=1; shift ;;
    -o | --out ) OUT="$2"; shift 2 ;;
    -s | --skip-save ) OUT=1; shift ;;
    -d | --debug ) DEBUG=true; VIEW=1; shift ;;
    -h | --help ) echo "$usage"; exit ;;
    -?(-)*=* ) echo "option assignment using '=' not supported"; exit ;;
    * ) 
      if [ "$1" != "" ]; then
        FILES+=("$1")
        shift
      else
        break 
      fi
      ;;
  esac
done


# Get environment if not set
if [ "$ENV" = "" ]; then
  ENV="$(find env -type f -exec basename {} \; \
  | gum filter --height=5 --fuzzy --placeholder='Select environment...')"
fi
[ $? -eq 130 ] && kill -INT $$

# Prompt for files if none from arguments
if [ "${#FILES[@]}" -eq 0 ]; then
  IFS=$'\n' read -r -d '' -a FILES < <( find . -type f -name '*.hurl' \
  | gum filter \
    --no-limit \
    --fuzzy \
    --height=10 \
    --placeholder='Select file(s)...' && printf '\0')
  [ $? -eq 130 ] && kill -INT $$
fi

index=0
for file in "${FILES[@]}"; do
  view="$VIEW"
  [ "$DEBUG" = true ] && out=1 || out="$OUT"
  echo "$file"
  to_run="hurl $file --variables-file=env/$ENV" 

  # Just run test if flagged
  if [ "$TEST" = true ]; then
    to_run="$to_run --test"
    eval "$to_run"
    exit $?
  fi
    
  # Otherwise, run verbose and capture output
  to_run="$to_run --very-verbose --error-format=long"
  response="$(gum spin --show-output --title "Running hurl..." -- bash -c "eval $to_run 2>&1")"
  # Exit if cancelled
  [ $? -eq 130 ] && kill -INT $$
  last_entry="$(echo "$response" \
  | tac \
  | grep 'Executing entry' -m1 \
  | grep -Eo '[0-9]+')"
  error_catch="$(echo "$response" | awk '/error: .*/,0')"
  body="$(echo "$response" \
  | tac \
  | grep "Response body:" -m1 -B1 \
  | sed '1q;d' \
  | cut -c 3-)"

  # Show any errors
  if [ "$error_catch" != "" ]; then
    [ "$DEBUG" ] && view='' && out="${OUT:-''}"
    if [ "$DEBUG" ]; then
      view=''
      out=''
      [ "$OUT" != "" ] && out="$OUT"
    fi
    
    gum log "Failed test on entry $last_entry; error below:" --level=error
    echo
    echo "$error_catch"
  fi

  # Show user output if desired
  if [ "$view" = "" ]; then
    gum confirm 'View Output?'
    view=$?
    [ "$view" -eq 130 ] && kill -INT $$
  fi
  if [ "$view" = 0 ]; then
    # echo "Test"
    if [ "$body" = "" ]; then
      echo "<empty body>"
    else
      echo "$body" | jless
    fi
  fi

  # Save ouput to file if desired
  if [ "$out" = "" ]; then
    gum confirm 'Save output to file?'
    out=$?
    [ "$out" -eq 130 ] && kill -INT $$
  fi
  if [ "$out" != 1 ]; then
    if [ "$out" != 0 ]; then
      path_out="$out"
      [ "$index" -gt 0 ] && path_out="$index-$out"
    else
      path_out="$(gum input --placeholder 'path/to/file.json' --header 'Output Path:')"
      [ $? -eq 130 ] && kill -INT $$
    fi
  fi
  if [ "$path_out" != "" ]; then
    cd "$cwd" || exit 1
    echo "$body" > "$path_out"
    cd "$execution_context" || exit 1
  fi
  (( index+=0 ))
done

# return to initial dir and (if instructed) save relative to it
cd "$cwd" || exit 1
